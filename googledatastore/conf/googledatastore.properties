# Copyright (c) 2015 YCSB contributors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you
# may not use this file except in compliance with the License. You
# may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License. See accompanying
# LICENSE file.

#
# Sample property file for Google Cloud Datastore DB client 

## Mandatory parameters
# See this link for instructions about setting up Google Cloud Datastore and
# authentication:
# https://cloud.google.com/datastore/docs/getstarted/start_java/
#
# After you setup your environment, you will have 3 pieces of information ready:
# datasetId, service account email, and a private key file. These must be
# configured via the properties below
#
# googledatastore.datasetId=<string id of your dataset>
# googledatastore.privateKeyFile=<full path to your private key file>
# googledatastore.serviceAccountEmail=<Your service account email>

# Google Cloud Datastore's read and update APIs do not support
# reading or updating a select subset of properties for an entity.
# (as of version v1beta2-rev1-3.0.2)
# Therefore, it's recommended that you set writeallfields and readallfields
# to true to get stable and comparable performance numbers.
writeallfields = true
readallfields = true

## Optional parameters
#
# Decides the consistency level of read requests. Acceptable value is:
# EVENTUAL, STRONG (default is EVENTUAL)
#
# googledatastore.readConsistency=EVENTUAL

# Decides how we group entities into entity groups. In Google Datastore,
# Entity Group is the unit in which the user can perform strongly
# consistent query on multiple items; Meanwhile, Entity group also has
# certain limitations in performance, especially with write QPS.
#
# We support two modes here:
#
# 1. [default] One entity per group (ONE_ENTITY_PER_GROUP)
#
# In this mode, every entity is a "root" entity and sits in one group,
# and every entity group has only one entity. Write QPS is high in this
# mode (and there is no documented limitation on this). But query across
# multiple entities are eventually consistent.
#
# When this mode is set, every entity is created with no ancestor key (meaning 
# the entity itself is the "root" entity).
#
# 2. Multiple entities per group (MULTI_ENTITY_PER_GROUP)
#
# In this mode, all entities in one benchmark run are placed under one
# ancestor (root) node therefore inside one entity group. Query/scan
# performed on these entities will be strongly consistent but write QPS
# will be subject to documented limitation (current is at 1 QPS).
#
# Because of the write QPS limit, it's highly recommended that you rate
# limit your benchmark's test rate to avoid excessive errors.
#
# The goal of this MULTI_ENTITY_PER_GROUP mode is to allow user to
# benchmark and understand performance characteristics of a single entity
# group of the Google Datastore.
#
# While in this mode, one can optionally specify a root key name. If not
# specified, a default name will be used.
#
# googledatastore.entityGroupingMode=ONE_ENTITY_PER_GROUP

# If you set the googledatastore.entityGroupingMode property to 
# MULTI_ENTITY_PER_GROUP, you can optionally specify the name of the root entity
#
# googledatastore.rootEntityName="YCSB_ROOT_ENTITY"

# Strongly recommended to set to uniform.
# requestdistribution = uniform

# Enable/disable debug message, default is false.
# googledatastore.debug = false
